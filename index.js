var app = angular.module('StarterApp', ['ngMaterial']);app.config(function ($sceProvider) {    $sceProvider.enabled(false);});app.factory('chartService', function () {    return {        createLinearChart: function () {            console.log('ChartService.createLinearChart()');        }    };});app.directive('sampleLinearChart', function () {    return {        restrict: 'EA',        template: '<svg width="275" height="100"></svg>',        replace: true,        link: function (scope, elem, attrs) {            var lineChartData = [                {date: "2011-10-01 00:00", close: 70},                {date: "2011-10-02 00:00", close: 0},                {date: "2011-10-03 00:00", close: 60},                {date: "2011-10-04 00:00", close: 120}            ];            var parseDateTime = d3.timeParse("%Y-%m-%e %H:%M");            lineChartData.forEach(function (d) {                d.date = parseDateTime(d.date);            });            var id = attrs.id;            var svg = d3.select("#" + id),                margin = {top: 25, right: 15, bottom: 30, left: 25},                width = +svg.attr("width") - margin.left - margin.right,                height = +svg.attr("height") - margin.top - margin.bottom,                g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");            var x = d3.scaleTime()                .rangeRound([0, width]);            var y = d3.scaleLinear()                .domain([0, 100])                .range([height, 0]);            var line = d3.line()                .x(function (d) {                    return x(d.date);                })                .y(function (d) {                    return y(d.close);                });            x.domain(d3.extent(lineChartData, function (d) {                return d.date;            }));            y.domain(d3.extent(lineChartData, function (d) {                return d.close;            }));            g.append("g")                .attr("transform", "translate(0," + height + ")")                .call(d3                    .axisBottom(x)                    .ticks(3)                    .tickSize(2)                    .tickFormat(d3.timeFormat("%b %e")))                .select(".domain");            svg.selectAll(".tick text")                .attr("transform", function (d) {                    return "translate(" + this.getBBox().height * -2 + "," + this.getBBox().height + 10 + ")rotate(-45)";                });            g.append("g")                .call(d3                    .axisLeft(y)                    .ticks(3)                    .tickSize(2))                .append("text")                .attr("fill", "#000")                .attr("transform", "rotate(-90)")                .attr("y", 6)                .attr("dy", "0.71em")                .attr("text-anchor", "end");            g.append("path")                .datum(lineChartData)                .attr("fill", "none")                .attr("stroke", "steelblue")                .attr("stroke-linejoin", "round")                .attr("stroke-linecap", "round")                .attr("stroke-width", 1.5)                .attr("d", line);        }    }});app.directive('linearChart', ['$http', function ($http) {    return {        restrict: 'EA',        scope: true,        template: '<md-card ng-init="showEdit=false" ng-mouseover="showEdit=true" ng-mouseleave="showEdit=false" width="1480" height="200">' +        '<md-card-title>' +        '<md-card-title-text>' +        '<span class="md-subhead">{{chartConfig.title}}</span>' +        '</md-card-title-text>' +        '</md-card-title>' +        '<svg width="1400" height="200"></svg>' +        '<div layout-gt-sm="column" ng-show="showEdit">' +        '<md-input-container>' +        '<label>Title</label>' +        '<input ng-model="chartConfig.title"/>' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Datasource</label>' +        '<input ng-model="chartConfig.datasource" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Domain</label>' +        '<input ng-model="chartConfig.domain" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Codomain</label>' +        '<input ng-model="chartConfig.codomain" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '</div>' +        '</md-card>',        replace: true,        link: function (scope, elem, attrs) {            var chartConfig = scope.chartConfig;            console.log("chart " + chartConfig.id + "'s dataSource: " + chartConfig.datasource);            scope.getChartData = function () {                removeChart();                $http.get(chartConfig.datasource)                    .then(function (response) {                        scope.chartData = response.data;                        createChart();                    });            };            function removeChart() {                var id = attrs.id;                var svg = d3.select("#" + id + ">svg");                svg.selectAll("*").remove();            }            function createChart() {                var lineChartData = scope.chartData;                var domain = scope.chartConfig.domain;                var codomain = scope.chartConfig.codomain                lineChartData.forEach(function (d) {                    d.date = new Date(d[domain]);                    d.value = d[codomain];                });                var id = attrs.id;                var svg = d3.select("#" + id + ">svg");                var margin = {top: 0, right: 0, bottom: 80, left: 35};                var width = attrs.width - margin.left - margin.right;                var height = attrs.height - margin.top - margin.bottom;                var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");                var x = d3.scaleTime()                    .rangeRound([0, width]);                var y = d3.scaleLinear()                    .domain([0, 100])                    .range([height, 0]);                var line = d3.line()                    .x(function (d) {                        return x(d[domain]);                    })                    .y(function (d) {                        return y(d[codomain]);                    });                x.domain(d3.extent(lineChartData, function (d) {                    return d[domain];                }));                y.domain(d3.extent(lineChartData, function (d) {                    return d[codomain];                }));                g.append("g")                    .attr("transform", "translate(0," + height + ")")                    .call(d3                        .axisBottom(x)                        .ticks(3)                        .tickSize(2)                        .tickFormat(d3.timeFormat("%b %e")))                    .select(".domain");                svg.selectAll(".tick text")                    .attr("transform", function (d) {                        return "translate(" + this.getBBox().height * -2 + "," + this.getBBox().height + 10 + ")rotate(-45)";                    });                g.append("g")                    .call(d3                        .axisLeft(y)                        .ticks(3)                        .tickSize(2))                    .append("text")                    .attr("fill", "#000")                    .attr("transform", "rotate(-90)")                    .attr("y", 6)                    .attr("dy", "0.71em")                    .attr("text-anchor", "end");                g.append("path")                    .datum(lineChartData)                    .attr("fill", "none")                    .attr("stroke", "steelblue")                    .attr("stroke-linejoin", "round")                    .attr("stroke-linecap", "round")                    .attr("stroke-width", 1.5)                    .attr("d", line);            }            scope.getChartData();        }    }}]);app.controller('AppCtrl', ['$scope', '$mdSidenav', '$mdToast', 'chartService', function ($scope, $mdSidenav, $mdToast, chartService) {    $scope.toggleSidenav = function () {        $mdSidenav('left').toggle();    };    $scope.chartConfigs = [];    $scope.addLinearChart = function () {        var chartConfig = {            id: $scope.chartConfigs.length,            type: 'linear',            title: 'Chart ' + new Date().getSeconds(),            datasource: 'https://sync-monitor.dev2.mdl.swisscom.ch/monitor',            domain: 'start',            codomain: 'duration'        };        $scope.chartConfigs.push(chartConfig);        $mdToast.show(            $mdToast.simple()                .textContent('Linear chart added')                .hideDelay(1)        );    }}]);