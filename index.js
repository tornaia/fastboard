var app = angular.module('StarterApp', ['ngMaterial']);app.config(function ($sceProvider) {    $sceProvider.enabled(false);});app.factory('chartConfigPersister', ['$location', function ($location) {    var toJSON = function (chartConfigs) {        return angular.toJson(chartConfigs);    };    var toChartConfigs = function (json) {        return angular.fromJson(json);    };    return {        getPersistedChartConfigs: function () {            var persistedChartConfig = $location.hash();            if (persistedChartConfig) {                return toChartConfigs(persistedChartConfig);            }            return [];        },        persistChartConfigs: function (chartConfigs) {            var chartConfigJSON = toJSON(chartConfigs);            $location.hash(chartConfigJSON);        }    };}]);app.directive('sampleLinearChart', function () {    return {        restrict: 'EA',        template: '<svg width="275" height="100"></svg>',        replace: true,        link: function (scope, elem, attrs) {            var lineChartData = [                {date: "2011-10-01 00:00", close: 70},                {date: "2011-10-02 00:00", close: 0},                {date: "2011-10-03 00:00", close: 60},                {date: "2011-10-04 00:00", close: 120}            ];            var parseDateTime = d3.timeParse("%Y-%m-%e %H:%M");            lineChartData.forEach(function (d) {                d.date = parseDateTime(d.date);            });            var id = attrs.id;            var svg = d3.select("#" + id),                margin = {top: 25, right: 15, bottom: 30, left: 25},                width = +svg.attr("width") - margin.left - margin.right,                height = +svg.attr("height") - margin.top - margin.bottom,                g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");            var x = d3.scaleTime()                .rangeRound([0, width]);            var y = d3.scaleLinear()                .domain([0, 100])                .range([height, 0]);            var line = d3.line()                .x(function (d) {                    return x(d.date);                })                .y(function (d) {                    return y(d.close);                });            x.domain(d3.extent(lineChartData, function (d) {                return d.date;            }));            y.domain(d3.extent(lineChartData, function (d) {                return d.close;            }));            g.append("g")                .attr("transform", "translate(0," + height + ")")                .call(d3                    .axisBottom(x)                    .ticks(3)                    .tickSize(2)                    .tickFormat(d3.timeFormat("%b %e")))                .select(".domain");            svg.selectAll(".tick text")                .attr("transform", function (d) {                    return "translate(" + this.getBBox().height * -2 + "," + this.getBBox().height + 10 + ")rotate(-45)";                });            g.append("g")                .call(d3                    .axisLeft(y)                    .ticks(3)                    .tickSize(2))                .append("text")                .attr("fill", "#000")                .attr("transform", "rotate(-90)")                .attr("y", 6)                .attr("dy", "0.71em")                .attr("text-anchor", "end");            g.append("path")                .datum(lineChartData)                .attr("fill", "none")                .attr("stroke", "steelblue")                .attr("stroke-linejoin", "round")                .attr("stroke-linecap", "round")                .attr("stroke-width", 1.5)                .attr("d", line);        }    }});app.directive('ngSvgWidth', function () {    return function (scope, element, attrs) {        scope.$watch(attrs.ngSvgWidth, function (value) {            element.attr('width', value);        });    };});app.directive('ngSvgHeight', function () {    return function (scope, element, attrs) {        scope.$watch(attrs.ngSvgHeight, function (value) {            element.attr('height', value);        });    };});app.directive('linearChart', ['$http', 'chartConfigPersister', function ($http, chartConfigPersister) {    return {        restrict: 'EA',        scope: true,        template: '<md-card ng-init="showEditForm=false" ng-mouseover="showEditButton=true" ng-mouseleave="showEditButton=false" width="{{chartConfig.width}}" height="{{chartConfig.height}}">' +        '<svg ng-svg-width="{{chartConfig.width}}" ng-svg-height="{{chartConfig.height + 10}}"></svg>' +        '<div layout="row">' +        '<div flex="15" ng-class="{\'vis-hidden\': !showEditButton || showEditForm}">' +        '<md-button class="md-icon-button" ng-click="showEditForm=true" aria-label="Edit">' +        '<md-icon md-svg-icon="edit.svg"></md-icon>' +        '</md-button>' +        '</div>' +        '<div flex="70" layout="row" layout-align="center center" ng-class="{\'vis-hidden\': showEditForm}">' +        '<span class="md-subhead">{{chartConfig.title}}</span>' +        '</div>' +        '<div flex="15">' +        '</div>' +        '</div>' +        '<div layout-gt-sm="column" ng-show="showEditForm">' +        '<div layout-gt-sm="row">' +        '<md-input-container>' +        '<label>Title</label>' +        '<input ng-model="chartConfig.title"/>' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Width</label>' +        '<input type="number" ng-model="chartConfig.width" ng-change="getChartData()" ng-model-options="{debounce: 1000}"/>' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Height</label>' +        '<input type="number" ng-model="chartConfig.height" ng-change="getChartData()" ng-model-options="{debounce: 1000}"/>' +        '</md-input-container>' +        '</div>' +        '<md-input-container>' +        '<label>Datasource</label>' +        '<input ng-model="chartConfig.datasource" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '<div layout-gt-sm="row">' +        '<md-input-container>' +        '<label>Domain</label>' +        '<input ng-model="chartConfig.domain" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Ticks</label>' +        '<input type="number" ng-model="chartConfig.domainTicks" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '<md-input-container>' +        '<label>Format</label>' +        '<input ng-model="chartConfig.domainTickFormat" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '<div class="hint">More details <a href="https://github.com/d3/d3-time-format/blob/master/README.md#timeFormat" target="_blank">here</a></div>' +        '</md-input-container>' +        '</div>' +        '<div layout-gt-sm="row">' +        '<md-input-container>' +        '<label>Codomain</label>' +        '<input ng-model="chartConfig.codomain" ng-change="getChartData()" ng-model-options="{debounce: 1000}">' +        '</md-input-container>' +        '</div>' +        '</div>' +        '<md-card-actions layout="row" layout-align="start center" ng-show="showEditForm">' +        '<md-button class="md-icon-button" ng-click="editDone()" aria-label="Done">' +        '<md-icon md-svg-icon="done.svg"></md-icon>' +        '</md-button>' +        '</md-card-actions>' +        '</md-card>',        replace: true,        link: {            post: function (scope, elem, attrs) {                var chartConfig = scope.chartConfig;                scope.getChartData = function () {                    removeChart();                    $http.get(chartConfig.datasource)                        .then(function (response) {                            scope.chartData = response.data;                            createChart();                        });                };                scope.editDone = function () {                    scope.showEditForm = false;                    chartConfigPersister.persistChartConfigs(scope.chartConfigs);                };                function removeChart() {                    var id = attrs.id;                    var svg = d3.select("#" + id + ">svg");                    svg.selectAll("*").remove();                }                function createChart() {                    var lineChartData = scope.chartData;                    var domain = scope.chartConfig.domain;                    var domainTicks = scope.chartConfig.domainTicks;                    var domainTickFormat = scope.chartConfig.domainTickFormat;                    var codomain = scope.chartConfig.codomain                    lineChartData.forEach(function (d) {                        d.date = new Date(d[domain]);                        d.value = d[codomain];                    });                    var id = attrs.id;                    var svg = d3.select("#" + id + ">svg");                    var margin = {top: 0, right: 0, bottom: 35, left: 35};                    var width = attrs.width - margin.left - margin.right;                    var height = attrs.height - margin.top - margin.bottom;                    var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");                    var x = d3.scaleTime()                        .rangeRound([0, width]);                    var y = d3.scaleLinear()                        .domain([0, 100])                        .range([height, 0]);                    var line = d3.line()                        .x(function (d) {                            return x(d[domain]);                        })                        .y(function (d) {                            return y(d[codomain]);                        });                    x.domain(d3.extent(lineChartData, function (d) {                        return d[domain];                    }));                    y.domain(d3.extent(lineChartData, function (d) {                        return d[codomain];                    }));                    g.append("g")                        .attr("transform", "translate(0," + height + ")")                        .call(d3                            .axisBottom(x)                            .ticks(domainTicks)                            .tickSize(2)                            .tickFormat(d3.timeFormat(domainTickFormat)))                        .select(".domain");                    svg.selectAll(".tick text")                        .attr("transform", function (d) {                            return "translate(" + this.getBBox().height * -2 + "," + this.getBBox().height + 10 + ")rotate(-45)";                        });                    g.append("g")                        .call(d3                            .axisLeft(y)                            .ticks(3)                            .tickSize(2))                        .append("text")                        .attr("fill", "#000")                        .attr("transform", "rotate(-90)")                        .attr("y", 6)                        .attr("dy", "0.71em")                        .attr("text-anchor", "end");                    g.append("path")                        .datum(lineChartData)                        .attr("fill", "none")                        .attr("stroke", "steelblue")                        .attr("stroke-linejoin", "round")                        .attr("stroke-linecap", "round")                        .attr("stroke-width", 1.5)                        .attr("d", line);                }                scope.getChartData();            }        }    }}]);app.controller('AppCtrl', ['$scope', '$mdSidenav', '$mdToast', 'chartConfigPersister', function ($scope, $mdSidenav, $mdToast, chartConfigPersister) {    $scope.toggleSidenav = function () {        $mdSidenav('left').toggle();    };    $scope.chartConfigs = chartConfigPersister.getPersistedChartConfigs();    $scope.addLinearChart = function () {        var chartConfig = {            id: $scope.chartConfigs.length,            type: 'linear',            width: 1480,            height: 200,            title: 'Chart ' + new Date().getSeconds(),            datasource: 'https://sync-monitor.dev2.mdl.swisscom.ch/monitor',            domain: 'start',            domainTicks: 10,            domainTickFormat: '%m-%e %H:%M',            codomain: 'duration'        };        $scope.chartConfigs.push(chartConfig);        chartConfigPersister.persistChartConfigs($scope.chartConfigs);        $mdToast.show(            $mdToast.simple()                .textContent('Linear chart added')                .hideDelay(1)        );    }}]);